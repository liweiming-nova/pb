// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: fund/services.proto

package fund

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChannelProxyService_Ping_FullMethodName = "/fund.ChannelProxyService/Ping"
)

// ChannelProxyServiceClient is the client API for ChannelProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelProxyServiceClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PongResp, error)
}

type channelProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelProxyServiceClient(cc grpc.ClientConnInterface) ChannelProxyServiceClient {
	return &channelProxyServiceClient{cc}
}

func (c *channelProxyServiceClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PongResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PongResp)
	err := c.cc.Invoke(ctx, ChannelProxyService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelProxyServiceServer is the server API for ChannelProxyService service.
// All implementations should embed UnimplementedChannelProxyServiceServer
// for forward compatibility.
type ChannelProxyServiceServer interface {
	Ping(context.Context, *PingReq) (*PongResp, error)
}

// UnimplementedChannelProxyServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChannelProxyServiceServer struct{}

func (UnimplementedChannelProxyServiceServer) Ping(context.Context, *PingReq) (*PongResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedChannelProxyServiceServer) testEmbeddedByValue() {}

// UnsafeChannelProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelProxyServiceServer will
// result in compilation errors.
type UnsafeChannelProxyServiceServer interface {
	mustEmbedUnimplementedChannelProxyServiceServer()
}

func RegisterChannelProxyServiceServer(s grpc.ServiceRegistrar, srv ChannelProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedChannelProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChannelProxyService_ServiceDesc, srv)
}

func _ChannelProxyService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelProxyServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelProxyService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelProxyServiceServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelProxyService_ServiceDesc is the grpc.ServiceDesc for ChannelProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fund.ChannelProxyService",
	HandlerType: (*ChannelProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ChannelProxyService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund/services.proto",
}

const (
	FundHubService_CreateAccount_FullMethodName        = "/fund.FundHubService/CreateAccount"
	FundHubService_CreateOnlineRecharge_FullMethodName = "/fund.FundHubService/CreateOnlineRecharge"
	FundHubService_CreateDebit_FullMethodName          = "/fund.FundHubService/CreateDebit"
)

// FundHubServiceClient is the client API for FundHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundHubServiceClient interface {
	// 创建资金账户
	CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error)
	// CreateOnlineRecharge 创建在线充值
	CreateOnlineRecharge(ctx context.Context, in *CreateOnlineRechargeReq, opts ...grpc.CallOption) (*OnlineRecharge, error)
	// CreateDebit 创建扣款
	CreateDebit(ctx context.Context, in *CreateDebitReq, opts ...grpc.CallOption) (*CreateDebitResp, error)
}

type fundHubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFundHubServiceClient(cc grpc.ClientConnInterface) FundHubServiceClient {
	return &fundHubServiceClient{cc}
}

func (c *fundHubServiceClient) CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResp)
	err := c.cc.Invoke(ctx, FundHubService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundHubServiceClient) CreateOnlineRecharge(ctx context.Context, in *CreateOnlineRechargeReq, opts ...grpc.CallOption) (*OnlineRecharge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnlineRecharge)
	err := c.cc.Invoke(ctx, FundHubService_CreateOnlineRecharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundHubServiceClient) CreateDebit(ctx context.Context, in *CreateDebitReq, opts ...grpc.CallOption) (*CreateDebitResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDebitResp)
	err := c.cc.Invoke(ctx, FundHubService_CreateDebit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundHubServiceServer is the server API for FundHubService service.
// All implementations should embed UnimplementedFundHubServiceServer
// for forward compatibility.
type FundHubServiceServer interface {
	// 创建资金账户
	CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error)
	// CreateOnlineRecharge 创建在线充值
	CreateOnlineRecharge(context.Context, *CreateOnlineRechargeReq) (*OnlineRecharge, error)
	// CreateDebit 创建扣款
	CreateDebit(context.Context, *CreateDebitReq) (*CreateDebitResp, error)
}

// UnimplementedFundHubServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFundHubServiceServer struct{}

func (UnimplementedFundHubServiceServer) CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedFundHubServiceServer) CreateOnlineRecharge(context.Context, *CreateOnlineRechargeReq) (*OnlineRecharge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOnlineRecharge not implemented")
}
func (UnimplementedFundHubServiceServer) CreateDebit(context.Context, *CreateDebitReq) (*CreateDebitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebit not implemented")
}
func (UnimplementedFundHubServiceServer) testEmbeddedByValue() {}

// UnsafeFundHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundHubServiceServer will
// result in compilation errors.
type UnsafeFundHubServiceServer interface {
	mustEmbedUnimplementedFundHubServiceServer()
}

func RegisterFundHubServiceServer(s grpc.ServiceRegistrar, srv FundHubServiceServer) {
	// If the following call pancis, it indicates UnimplementedFundHubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FundHubService_ServiceDesc, srv)
}

func _FundHubService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundHubServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundHubService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundHubServiceServer).CreateAccount(ctx, req.(*CreateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundHubService_CreateOnlineRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOnlineRechargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundHubServiceServer).CreateOnlineRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundHubService_CreateOnlineRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundHubServiceServer).CreateOnlineRecharge(ctx, req.(*CreateOnlineRechargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundHubService_CreateDebit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundHubServiceServer).CreateDebit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundHubService_CreateDebit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundHubServiceServer).CreateDebit(ctx, req.(*CreateDebitReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FundHubService_ServiceDesc is the grpc.ServiceDesc for FundHubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundHubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fund.FundHubService",
	HandlerType: (*FundHubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _FundHubService_CreateAccount_Handler,
		},
		{
			MethodName: "CreateOnlineRecharge",
			Handler:    _FundHubService_CreateOnlineRecharge_Handler,
		},
		{
			MethodName: "CreateDebit",
			Handler:    _FundHubService_CreateDebit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund/services.proto",
}
