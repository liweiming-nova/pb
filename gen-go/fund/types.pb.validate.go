// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fund/types.proto

package fund

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingReqMultiError, or nil if none found.
func (m *PingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingReqMultiError(errors)
	}

	return nil
}

// PingReqMultiError is an error wrapping multiple validation errors returned
// by PingReq.ValidateAll() if the designated constraints aren't met.
type PingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingReqMultiError) AllErrors() []error { return m }

// PingReqValidationError is the validation error returned by PingReq.Validate
// if the designated constraints aren't met.
type PingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingReqValidationError) ErrorName() string { return "PingReqValidationError" }

// Error satisfies the builtin error interface
func (e PingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingReqValidationError{}

// Validate checks the field values on PongResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PongResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PongResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PongRespMultiError, or nil
// if none found.
func (m *PongResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PongResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PongRespMultiError(errors)
	}

	return nil
}

// PongRespMultiError is an error wrapping multiple validation errors returned
// by PongResp.ValidateAll() if the designated constraints aren't met.
type PongRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PongRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PongRespMultiError) AllErrors() []error { return m }

// PongRespValidationError is the validation error returned by
// PongResp.Validate if the designated constraints aren't met.
type PongRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PongRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PongRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PongRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PongRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PongRespValidationError) ErrorName() string { return "PongRespValidationError" }

// Error satisfies the builtin error interface
func (e PongRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPongResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PongRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PongRespValidationError{}

// Validate checks the field values on CreateAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountReqMultiError, or nil if none found.
func (m *CreateAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateAccountReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBizType()) < 1 {
		err := CreateAccountReqValidationError{
			field:  "BizType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := CreateAccountReqValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CreateAccountReqMultiError(errors)
	}

	return nil
}

// CreateAccountReqMultiError is an error wrapping multiple validation errors
// returned by CreateAccountReq.ValidateAll() if the designated constraints
// aren't met.
type CreateAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountReqMultiError) AllErrors() []error { return m }

// CreateAccountReqValidationError is the validation error returned by
// CreateAccountReq.Validate if the designated constraints aren't met.
type CreateAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountReqValidationError) ErrorName() string { return "CreateAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountReqValidationError{}

// Validate checks the field values on CreateAccountResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRespMultiError, or nil if none found.
func (m *CreateAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FundAccountId

	// no validation rules for FundAccountNo

	// no validation rules for UserId

	// no validation rules for Status

	for idx, item := range m.GetBalances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAccountRespValidationError{
						field:  fmt.Sprintf("Balances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAccountRespValidationError{
						field:  fmt.Sprintf("Balances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAccountRespValidationError{
					field:  fmt.Sprintf("Balances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAccountRespMultiError(errors)
	}

	return nil
}

// CreateAccountRespMultiError is an error wrapping multiple validation errors
// returned by CreateAccountResp.ValidateAll() if the designated constraints
// aren't met.
type CreateAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRespMultiError) AllErrors() []error { return m }

// CreateAccountRespValidationError is the validation error returned by
// CreateAccountResp.Validate if the designated constraints aren't met.
type CreateAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRespValidationError) ErrorName() string {
	return "CreateAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRespValidationError{}

// Validate checks the field values on CreateOnlineRechargeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOnlineRechargeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOnlineRechargeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOnlineRechargeReqMultiError, or nil if none found.
func (m *CreateOnlineRechargeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOnlineRechargeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FundBalanceId

	if utf8.RuneCountInString(m.GetRequestId()) < 1 {
		err := CreateOnlineRechargeReqValidationError{
			field:  "RequestId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAmount()) < 1 {
		err := CreateOnlineRechargeReqValidationError{
			field:  "Amount",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := CreateOnlineRechargeReqValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetRechargeChannel()) < 1 {
		err := CreateOnlineRechargeReqValidationError{
			field:  "RechargeChannel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReturnUrl()) < 1 {
		err := CreateOnlineRechargeReqValidationError{
			field:  "ReturnUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSourceOperator()) < 1 {
		err := CreateOnlineRechargeReqValidationError{
			field:  "SourceOperator",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	// no validation rules for BizType

	if len(errors) > 0 {
		return CreateOnlineRechargeReqMultiError(errors)
	}

	return nil
}

// CreateOnlineRechargeReqMultiError is an error wrapping multiple validation
// errors returned by CreateOnlineRechargeReq.ValidateAll() if the designated
// constraints aren't met.
type CreateOnlineRechargeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOnlineRechargeReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOnlineRechargeReqMultiError) AllErrors() []error { return m }

// CreateOnlineRechargeReqValidationError is the validation error returned by
// CreateOnlineRechargeReq.Validate if the designated constraints aren't met.
type CreateOnlineRechargeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOnlineRechargeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOnlineRechargeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOnlineRechargeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOnlineRechargeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOnlineRechargeReqValidationError) ErrorName() string {
	return "CreateOnlineRechargeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOnlineRechargeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOnlineRechargeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOnlineRechargeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOnlineRechargeReqValidationError{}

// Validate checks the field values on FundAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FundAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FundAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FundAccountMultiError, or
// nil if none found.
func (m *FundAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *FundAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FundAccountId

	// no validation rules for FundAccountNo

	// no validation rules for UserName

	// no validation rules for UserIdentifier

	// no validation rules for UserOpenId

	// no validation rules for UserId

	// no validation rules for Status

	if len(errors) > 0 {
		return FundAccountMultiError(errors)
	}

	return nil
}

// FundAccountMultiError is an error wrapping multiple validation errors
// returned by FundAccount.ValidateAll() if the designated constraints aren't met.
type FundAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FundAccountMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FundAccountMultiError) AllErrors() []error { return m }

// FundAccountValidationError is the validation error returned by
// FundAccount.Validate if the designated constraints aren't met.
type FundAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FundAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FundAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FundAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FundAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FundAccountValidationError) ErrorName() string { return "FundAccountValidationError" }

// Error satisfies the builtin error interface
func (e FundAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFundAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FundAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FundAccountValidationError{}

// Validate checks the field values on Balance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Balance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Balance with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BalanceMultiError, or nil if none found.
func (m *Balance) ValidateAll() error {
	return m.validate(true)
}

func (m *Balance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FundBalanceId

	// no validation rules for FundBalanceNo

	// no validation rules for UserId

	// no validation rules for BizType

	// no validation rules for Currency

	// no validation rules for TotalAmount

	// no validation rules for AvailableAmount

	// no validation rules for FrozenAmount

	// no validation rules for PendingAmount

	// no validation rules for Status

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetFundAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BalanceValidationError{
					field:  "FundAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BalanceValidationError{
					field:  "FundAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFundAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceValidationError{
				field:  "FundAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BalanceMultiError(errors)
	}

	return nil
}

// BalanceMultiError is an error wrapping multiple validation errors returned
// by Balance.ValidateAll() if the designated constraints aren't met.
type BalanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceMultiError) AllErrors() []error { return m }

// BalanceValidationError is the validation error returned by Balance.Validate
// if the designated constraints aren't met.
type BalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceValidationError) ErrorName() string { return "BalanceValidationError" }

// Error satisfies the builtin error interface
func (e BalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceValidationError{}

// Validate checks the field values on OnlineRecharge with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnlineRecharge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineRecharge with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OnlineRechargeMultiError,
// or nil if none found.
func (m *OnlineRecharge) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineRecharge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OutPaymentId

	// no validation rules for FundAccountId

	// no validation rules for FundBalanceId

	// no validation rules for UserId

	// no validation rules for BizType

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Channel

	// no validation rules for Status

	// no validation rules for PaymentStatus

	// no validation rules for ChannelOrderId

	// no validation rules for ChannelTradeId

	// no validation rules for ChannelRetCode

	// no validation rules for ChannelRetMsg

	// no validation rules for SourceOperator

	// no validation rules for Metadata

	// no validation rules for CompletedTime

	// no validation rules for CreatedAt

	// no validation rules for PaymentAmount

	// no validation rules for PaymentUrl

	// no validation rules for SysRetCode

	// no validation rules for SysRetMsg

	// no validation rules for NetAmount

	// no validation rules for PaymentFee

	// no validation rules for RechargeAmount

	if len(errors) > 0 {
		return OnlineRechargeMultiError(errors)
	}

	return nil
}

// OnlineRechargeMultiError is an error wrapping multiple validation errors
// returned by OnlineRecharge.ValidateAll() if the designated constraints
// aren't met.
type OnlineRechargeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineRechargeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineRechargeMultiError) AllErrors() []error { return m }

// OnlineRechargeValidationError is the validation error returned by
// OnlineRecharge.Validate if the designated constraints aren't met.
type OnlineRechargeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineRechargeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineRechargeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineRechargeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineRechargeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineRechargeValidationError) ErrorName() string { return "OnlineRechargeValidationError" }

// Error satisfies the builtin error interface
func (e OnlineRechargeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineRecharge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineRechargeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineRechargeValidationError{}

// Validate checks the field values on CreateDebitReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDebitReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDebitReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateDebitReqMultiError,
// or nil if none found.
func (m *CreateDebitReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDebitReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRequestId()) < 1 {
		err := CreateDebitReqValidationError{
			field:  "RequestId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	// no validation rules for BizType

	// no validation rules for FundBalanceId

	if utf8.RuneCountInString(m.GetBizNo()) < 1 {
		err := CreateDebitReqValidationError{
			field:  "BizNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDebitType()) < 1 {
		err := CreateDebitReqValidationError{
			field:  "DebitType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAmount()) < 1 {
		err := CreateDebitReqValidationError{
			field:  "Amount",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := CreateDebitReqValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for ExpireMinutes

	if utf8.RuneCountInString(m.GetSourceOperator()) < 1 {
		err := CreateDebitReqValidationError{
			field:  "SourceOperator",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Summary

	// no validation rules for Metadata

	if len(errors) > 0 {
		return CreateDebitReqMultiError(errors)
	}

	return nil
}

// CreateDebitReqMultiError is an error wrapping multiple validation errors
// returned by CreateDebitReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDebitReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDebitReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDebitReqMultiError) AllErrors() []error { return m }

// CreateDebitReqValidationError is the validation error returned by
// CreateDebitReq.Validate if the designated constraints aren't met.
type CreateDebitReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDebitReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDebitReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDebitReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDebitReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDebitReqValidationError) ErrorName() string { return "CreateDebitReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateDebitReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDebitReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDebitReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDebitReqValidationError{}

// Validate checks the field values on CreateDebitResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDebitResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDebitResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDebitRespMultiError, or nil if none found.
func (m *CreateDebitResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDebitResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxNo

	// no validation rules for FundBalanceId

	// no validation rules for FundBalanceNo

	// no validation rules for Status

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for FailReason

	// no validation rules for RequestId

	// no validation rules for BizNo

	if len(errors) > 0 {
		return CreateDebitRespMultiError(errors)
	}

	return nil
}

// CreateDebitRespMultiError is an error wrapping multiple validation errors
// returned by CreateDebitResp.ValidateAll() if the designated constraints
// aren't met.
type CreateDebitRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDebitRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDebitRespMultiError) AllErrors() []error { return m }

// CreateDebitRespValidationError is the validation error returned by
// CreateDebitResp.Validate if the designated constraints aren't met.
type CreateDebitRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDebitRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDebitRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDebitRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDebitRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDebitRespValidationError) ErrorName() string { return "CreateDebitRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateDebitRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDebitResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDebitRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDebitRespValidationError{}
